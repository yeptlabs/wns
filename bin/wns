#!/usr/bin/env node
var prog = require('./client.js');

console.log('  Welcome to WNS Manager.')
console.log('');

// Default commands.
prog.option('-e, --exec [cmd]','execute command on module')

if (!prog.isValidModule)
	prog
		.option('-n, --new [name]','setup a new server')

prog.parse(process.argv);

// If is selected create new server...
if (prog.new!==undefined)
{
	var name = prog.new;

	if (name!==true)
	{
		var newPath = path.resolve(process.cwd()+'/'+prog.new).replace(/\\/g,'/')+'/';
		if (!fs.existsSync(newPath))
			fs.mkdir(name);
	}
	else
		var newPath = path.resolve(process.cwd()+'/').replace(/\\/g,'/')+'/';

	var success=wns.console.buildServer(newPath);
	if (!success)
		console.log('  Could not build new server...');
	else
		console.log();console.log('  A new server configuration was written on the current directory.');
} else if (prog.exec) {
	var cmd = prog.exec+' '+prog.args.join(' ');
	if (prog.isServer) {
		var server = wns.console.addServer(path.relative(prog.wnsPath,prog._modulePath))
		server.exec(cmd);
	} else if (!prog.isApp)
		wns.console.exec(cmd);
} else if (prog.isValidModule)
{

	if (prog.isServer)
		prog
			.option('-a, --app [application name]','create a new application')

	prog
		.option('-p, --package [install/remove] [packageName]','server package control')
		.option('-c, --config [set/get] [property] [value] [type]','redefine module config')

	if (prog.isServer)
		prog
			.option('-r, --run','run module')

	prog
		.parse(process.argv);
	if (prog.run)
	{
		wns.console.addServer(path.relative(prog.wnsPath,prog._modulePath));
		prog.keepAlive=true;
	}  else if (prog.app!==undefined)
	{
		var name = prog.app;
		prog.keepAlive=true;
		wns.console.once('loadModule',function (e,moduleName,server) {

			while (name===true || fs.existsSync(server.modulePath+server.getConfig('appDirectory')+name+"/"))
			{
				var buff = new Buffer(16);
				uuid.v4({},buff);
				name = buff.toString('hex').substr(0,10);
			}

			server.once('ready',function () {
				
				var success = server.buildApplication(name);
				if (!success)
					console.log('  Failed to create new application...');
				
				process.exit();
			});
		});
		wns.console.addServer(path.relative(prog.wnsPath,prog._modulePath));

	} else if (prog.config) 
	{
		var configPath = prog._modulePath+'config.json';
		var configFile = (fs.readFileSync(configPath,'utf8').toString())
					.replace(/\\/g,function () { return "\\"+arguments[0]; })
					.replace(/\/\/.+?(?=\n|\r|$)|\/\*[\s\S]+?\*\//g,'');
		var config = JSON.parse(configFile);

		var actions = {
			get: function (property) {
				if (!property)
					console.log('  GET: Missing `property` in arguments.')
				else
					console.log('  GET: Property `'+property+'` is defined as '+util.inspect(config[property+'']))
			},
			set: function (property,value,type) {
				if (!property || !value)
					console.log('  SET: Missing `property` or `value` in arguments.')
				else
				{
					var val = value;
					if (type && global[type])
						val = new global[type](val).valueOf();
					config[property+'']=val;
					fs.writeFileSync(configPath,JSON.stringify(config, null, "\t"),'utf8');
					console.log('  SET: Property `'+property+'` is now defined as '+util.inspect(val))
				}
			}
		};
		var action = 'get';

		if (actions[prog.args[0]])
			action = prog.args.splice(0,1)[0];

		actions[action].apply(undefined,prog.args);

	} else if (prog.package && prog.package != true)
	{
		var args = prog.args;
			args.unshift(prog.package);
		var fork = require('child_process').fork,
			wpm = fork(__dirname + '/wnspm', args);
		wpm.on('close', function () { process.exit(); })
		prog.keepAlive=true;
	} else
		prog.outputHelp();
} else
	prog.outputHelp();

(!prog.keepAlive)&&process.exit()
